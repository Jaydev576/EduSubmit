// <auto-generated />
using System;
using EduSubmit.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EduSubmit.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EduSubmit.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstructorId")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("EduSubmit.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("ClassId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("EduSubmit.Models.Grade", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.Property<int>("InstructorId")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("StudentId", "AssignmentId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("EduSubmit.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InstructorId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("EduSubmit.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrganizationId"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("OrganizationId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("EduSubmit.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EduSubmit.Models.Submission", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StudentId", "AssignmentId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ClassId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("EduSubmit.Models.Assignment", b =>
                {
                    b.HasOne("EduSubmit.Models.Class", "Class")
                        .WithMany("Assignments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduSubmit.Models.Instructor", "Instructor")
                        .WithMany("Assignments")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EduSubmit.Models.Class", b =>
                {
                    b.HasOne("EduSubmit.Models.Organization", "Organization")
                        .WithMany("Classes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("EduSubmit.Models.Grade", b =>
                {
                    b.HasOne("EduSubmit.Models.Assignment", "Assignment")
                        .WithMany("Grades")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduSubmit.Models.Instructor", "Instructor")
                        .WithMany("Grades")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduSubmit.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduSubmit.Models.Submission", "Submission")
                        .WithOne()
                        .HasForeignKey("EduSubmit.Models.Grade", "StudentId", "AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Instructor");

                    b.Navigation("Student");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("EduSubmit.Models.Instructor", b =>
                {
                    b.HasOne("EduSubmit.Models.Organization", "Organization")
                        .WithMany("Instructors")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("EduSubmit.Models.Student", b =>
                {
                    b.HasOne("EduSubmit.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduSubmit.Models.Organization", "Organization")
                        .WithMany("Students")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("EduSubmit.Models.Submission", b =>
                {
                    b.HasOne("EduSubmit.Models.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduSubmit.Models.Class", "Class")
                        .WithMany("Submissions")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduSubmit.Models.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduSubmit.Models.Assignment", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("EduSubmit.Models.Class", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Students");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("EduSubmit.Models.Instructor", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("EduSubmit.Models.Organization", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduSubmit.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
