@model IEnumerable<EduSubmit.Models.Grade>

@{
    ViewData["Title"] = "Grades";
    ViewData["ActivePage"] = "Grades";
    Layout = "~/Views/Shared/_StudentLayout.cshtml";

    var subjects = Model.Select(g => g.Assignment?.SubjectName).Distinct().Where(s => s != null).ToList();
    var isCodingAssignments = ViewBag.IsCodingAssignments as Dictionary<int, bool> ?? new Dictionary<int, bool>();
}

<style>
    .grades-container {
        padding: 0.5rem;
        max-width: 100%;
    }

    .table-responsive {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }

    .grades-table {
        width: 100%;
        min-width: 300px;
    }

    th, td {
        padding: 0.5rem;
        vertical-align: middle;
    }

    /* Mobile-first approach */
    @@media (max-width: 576px) {
        .grades-table {
            display: block;
            overflow-x: auto;
        }

        thead {
            display: none; /* Hide header on very small screens */
        }

        tbody tr {
            display: block;
            margin-bottom: 1rem;
            border: 1px solid #dee2e6;
            border-radius: 8px;
        }

        tbody td {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem;
            border-bottom: 1px solid #eee;
        }

            tbody td::before {
                content: attr(data-label);
                font-weight: bold;
                margin-right: 0.5rem;
            }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
        }

        .card-body {
            padding: 0.5rem !important;
        }
    }

    @@media (min-width: 577px) {
        th, td {
            white-space: nowrap;
        }
    }

    @@media (max-width: 768px) {
        .form-select, label {
            font-size: 0.9rem;
        }
    }
</style>

<div class="container-fluid grades-container mt-3">
    <div class="card border-primary shadow-sm mb-3">
        <div class="card-body text-center py-2">
            <h2 class="text-primary mb-0">📊 Grades</h2>
        </div>
    </div>

    <div class="card p-3 shadow-sm mb-3" style="background: #F8FEFF; border-radius: 12px;">
        <div class="row g-2">
            <div class="col-12 col-md-6">
                <label class="fw-bold mb-1" for="subjectDropdown">Subject:</label>
                <select class="form-select shadow-sm border-0" id="subjectDropdown">
                    <option value="">📚 All Subjects</option>
                    @foreach (var subject in subjects) {
                        <option value="@subject">@subject</option>
                    }
                </select>
            </div>
            <div class="col-12 col-md-6">
                <label class="fw-bold mb-1" for="typeDropdown">Type:</label>
                <select class="form-select shadow-sm border-0" id="typeDropdown">
                    <option value="">🧾 All Assignments</option>
                    <option value="coding">💻 Coding</option>
                    <option value="normal">📝 Normal</option>
                </select>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover text-center mb-0 grades-table">
                    <thead style="background: linear-gradient(135deg, #007BFF, #0056b3);">
                        <tr class="text-white">
                            <th class="sortable" data-sort="assignment">Assignment 🔼</th>
                            <th>Subject</th>
                            <th class="sortable" data-sort="score">Score 🔼</th>
                            <th class="sortable" data-sort="maxScore">Max 🔼</th>
                            <th>Remarks</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="gradesBody">
                        @foreach (var grade in Model) {
                            bool isCoding = isCodingAssignments.TryGetValue(grade.AssignmentId, out bool coding) && coding;
                            <tr data-subject="@grade.Assignment?.SubjectName" data-type="@(isCoding ? "coding" : "normal")">
                                <td data-label="Assignment" class="assignment">@grade.Assignment?.Title</td>
                                <td data-label="Subject">@grade.Assignment?.SubjectName</td>
                                <td data-label="Score" class="score">@grade.Score</td>
                                <td data-label="Max" class="maxScore">@grade.Assignment?.Points</td>
                                <td data-label="Remarks">@grade.Remarks</td>
                                <td data-label="Actions">
                                    <a asp-action="Details" asp-controller="Grade"
                                       asp-route-studentId="@grade.StudentId"
                                       asp-route-assignmentId="@grade.AssignmentId"
                                       class="btn btn-info btn-sm shadow-sm">📖</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div id="noGradesMessage" class="text-center text-muted my-3 d-none">
                <h5>📭 No grades yet</h5>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const elements = {
            subject: document.getElementById("subjectDropdown"),
            type: document.getElementById("typeDropdown"),
            body: document.getElementById("gradesBody"),
            noGrades: document.getElementById("noGradesMessage")
        };

        const sortElements = document.querySelectorAll(".sortable");
        let sortOrder = { assignment: true, score: true, maxScore: true };
        const rows = Array.from(elements.body.querySelectorAll("tr"));

        const filterTable = () => {
            const subject = elements.subject.value.toLowerCase();
            const type = elements.type.value.toLowerCase();
            let visibleCount = 0;

            rows.forEach(row => {
                const rowSubject = row.dataset.subject?.toLowerCase() || "";
                const rowType = row.dataset.type?.toLowerCase() || "";
                const isVisible = (!subject || rowSubject === subject) && (!type || rowType === type);
                row.style.display = isVisible ? "" : "none";
                if (isVisible) visibleCount++;
            });

            elements.noGrades.classList.toggle("d-none", visibleCount > 0);
        };

        const sortTable = (key, element) => {
            rows.sort((a, b) => {
                const valA = key === "assignment"
                    ? a.querySelector("." + key).textContent.trim().toLowerCase()
                    : parseFloat(a.querySelector("." + key).textContent) || 0;
                const valB = key === "assignment"
                    ? b.querySelector("." + key).textContent.trim().toLowerCase()
                    : parseFloat(b.querySelector("." + key).textContent) || 0;
                return sortOrder[key] ? valA > valB ? 1 : -1 : valA < valB ? 1 : -1;
            });

            rows.forEach(row => elements.body.appendChild(row));
            sortOrder[key] = !sortOrder[key];
            element.innerHTML = `${element.textContent.replace(/[🔼🔽]/g, '')} ${sortOrder[key] ? "🔼" : "🔽"}`;
        };

        elements.subject.addEventListener("change", filterTable);
        elements.type.addEventListener("change", filterTable);
        sortElements.forEach(el => {
            el.addEventListener("click", () => sortTable(el.dataset.sort, el));
            el.style.cursor = "pointer";
        });

        filterTable();
    });
</script>