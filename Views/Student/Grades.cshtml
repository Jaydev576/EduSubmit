@model IEnumerable<EduSubmit.Models.Grade>

@{
    ViewData["Title"] = "Grades";
    ViewData["ActivePage"] = "Grades";
    Layout = "~/Views/Shared/_StudentLayout.cshtml";

    var subjects = Model.Select(g => g.Assignment?.SubjectName).Distinct().Where(s => s != null).ToList();
    var isCodingAssignments = ViewBag.IsCodingAssignments as Dictionary<int, bool> ?? new Dictionary<int, bool>();
}

<style>
    @@media (max-width: 768px) {
        table td, table th {
            font-size: 0.875rem;
            white-space: normal !important;
        }

        .form-label,
        label {
            font-size: 1rem;
        }

        .form-select {
            font-size: 0.95rem;
        }

        .btn-sm {
            font-size: 0.85rem;
        }
    }
</style>

<div class="container mt-4">
    <!-- Header -->
    <div class="card border-primary shadow-sm mb-4">
        <div class="card-body text-center">
            <h2 class="text-primary">📊 Grades</h2>
        </div>
    </div>

    <!-- Filters -->
    <div class="card p-4 shadow-sm mb-4" style="background: #F8FEFF; border-radius: 12px;">
        <div class="row g-3">
            <div class="col-12 col-md-6">
                <label class="fw-bold" for="subjectDropdown">Filter by Subject:</label>
                <select class="form-select shadow-sm bg-white border-0" id="subjectDropdown">
                    <option value="">📚 All Subjects</option>
                    @foreach (var subject in subjects) {
                        <option value="@subject">@subject</option>
                    }
                </select>
            </div>

            <div class="col-12 col-md-6">
                <label class="fw-bold" for="typeDropdown">Filter by Type:</label>
                <select class="form-select shadow-sm bg-white border-0" id="typeDropdown">
                    <option value="">🧾 All Assignments</option>
                    <option value="coding">💻 Coding Assignments</option>
                    <option value="normal">📝 Normal Assignments</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Grades Table -->
    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle text-center mb-0">
                    <thead class="text-white" style="background: linear-gradient(135deg, #007BFF, #0056b3);">
                        <tr>
                            <th id="assignmentColumn" class="sortable" data-sort="assignment">Assignment 🔼</th>
                            <th>Subject</th>
                            <th id="scoreColumn" class="sortable" data-sort="score">Score 🔼</th>
                            <th id="maxScoreColumn" class="sortable" data-sort="maxScore">Max Score 🔼</th>
                            <th>Remarks</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="gradesBody">
                        @foreach (var grade in Model) {
                            bool isCoding = isCodingAssignments.TryGetValue(grade.AssignmentId, out bool coding) && coding;
                            <tr data-subject="@grade.Assignment?.SubjectName" data-type="@(isCoding ? "coding" : "normal")">
                                <td class="assignment">@grade.Assignment?.Title</td>
                                <td>@grade.Assignment?.SubjectName</td>
                                <td class="score">@grade.Score</td>
                                <td class="maxScore">@grade.Assignment?.Points</td>
                                <td>@grade.Remarks</td>
                                <td>
                                    <a asp-action="Details" asp-controller="Grade"
                                       asp-route-studentId="@grade.StudentId"
                                       asp-route-assignmentId="@grade.AssignmentId"
                                       class="btn btn-info btn-sm shadow-sm">📖 Details</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- No Grades Message -->
            <div id="noGradesMessage" class="text-center text-muted my-4 d-none">
                <h5>📭 You haven't received any grades yet for your submitted assignments.</h5>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const subjectDropdown = document.getElementById("subjectDropdown");
        const typeDropdown = document.getElementById("typeDropdown");
        const gradesBody = document.getElementById("gradesBody");
        const assignmentColumn = document.getElementById("assignmentColumn");
        const scoreColumn = document.getElementById("scoreColumn");
        const maxScoreColumn = document.getElementById("maxScoreColumn");
        const noGradesMessage = document.getElementById("noGradesMessage");

        let sortOrder = { assignment: true, score: true, maxScore: true };

        function filterTable() {
            const selectedSubject = subjectDropdown.value.toLowerCase();
            const selectedType = typeDropdown.value.toLowerCase();
            let hasVisibleRow = false;

            gradesBody.querySelectorAll("tr").forEach(row => {
                const rowSubject = row.getAttribute("data-subject")?.toLowerCase() || "";
                const rowType = row.getAttribute("data-type")?.toLowerCase() || "";
                const visible = (!selectedSubject || rowSubject === selectedSubject) &&
                                (!selectedType || rowType === selectedType);

                row.style.display = visible ? "" : "none";
                if (visible) hasVisibleRow = true;
            });

            noGradesMessage.classList.toggle("d-none", hasVisibleRow);
        }

        function sortTable(column, key) {
            let rows = Array.from(gradesBody.querySelectorAll("tr"));
            rows.sort((a, b) => {
                let valA = key === "assignment"
                    ? a.querySelector("." + key).textContent.trim().toLowerCase()
                    : parseFloat(a.querySelector("." + key).textContent) || 0;
                let valB = key === "assignment"
                    ? b.querySelector("." + key).textContent.trim().toLowerCase()
                    : parseFloat(b.querySelector("." + key).textContent) || 0;

                return sortOrder[key] ? (valA > valB ? 1 : -1) : (valA < valB ? 1 : -1);
            });

            rows.forEach(row => gradesBody.appendChild(row));
            sortOrder[key] = !sortOrder[key];
            column.innerHTML = `${column.textContent.replace(/[🔼🔽]/g, '')} ${sortOrder[key] ? "🔼" : "🔽"}`;
        }

        subjectDropdown.addEventListener("change", filterTable);
        typeDropdown.addEventListener("change", filterTable);
        assignmentColumn.addEventListener("click", () => sortTable(assignmentColumn, "assignment"));
        scoreColumn.addEventListener("click", () => sortTable(scoreColumn, "score"));
        maxScoreColumn.addEventListener("click", () => sortTable(maxScoreColumn, "maxScore"));

        filterTable();
    });
</script>