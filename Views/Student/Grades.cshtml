@model IEnumerable<EduSubmit.Models.Grade>

@{
    ViewData["Title"] = "Grades";
    ViewData["ActivePage"] = "Grades";
    Layout = "~/Views/Shared/_StudentLayout.cshtml";

    var subjects = Model.Select(g => g.Assignment?.SubjectName).Distinct().Where(s => s != null).ToList();
}

<div class="container mt-4">
    <!-- Floating Header -->
    <div class="card border border-primary shadow-sm mb-3">
        <div class="card-body text-center">
            <h2 class="text-primary">📊 Grades</h2>
        </div>
    </div>

    <!-- Filters & Sorting -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <!-- Subject Filter -->
        <div class="d-flex">
            <label class="me-2 fw-bold align-self-center">Filter by Subject:</label>
            <select class="form-select me-2" id="subjectDropdown">
                <option value="">All Subjects</option>
                @foreach (var subject in subjects) {
                    <option value="@subject">@subject</option>
                }
            </select>
        </div>

        <!-- Sorting Button -->
        <button id="sortButton" class="btn btn-outline-primary">
            Sort by Score 🔼
        </button>
    </div>

    <!-- Grades Table -->
    <div class="card shadow-sm">
        <div class="card-body">
            <table class="table table-striped table-hover text-center" id="gradesTable">
                <thead class="text-white" style="background: linear-gradient(135deg, #007BFF, #0056b3);">
                    <tr>
                        <th>Assignment</th>
                        <th>Name</th>
                        <th id="scoreColumn" style="cursor: pointer;">Score</th>
                        <th>Remarks</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="gradesBody">
                    @foreach (var grade in Model) {
                        <tr data-subject="@grade.Assignment?.SubjectName">
                            <td>@grade.Assignment?.Title</td>
                            <td>@grade.Student?.FirstName @grade.Student?.LastName</td>
                            <td class="score">@grade.Score</td>
                            <td>@grade.Remarks</td>
                            <td>
                                <a asp-action="Details" asp-controller="Grade"
                                   asp-route-studentId="@grade.StudentId"
                                   asp-route-assignmentId="@grade.AssignmentId"
                                   class="btn btn-info btn-sm shadow-sm">
                                    📖 Details
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- JavaScript for Filtering and Sorting -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const subjectDropdown = document.getElementById("subjectDropdown");
        const sortButton = document.getElementById("sortButton");
        const gradesBody = document.getElementById("gradesBody");
        let ascending = true;  // Sorting order flag

        // Subject filtering
        subjectDropdown.addEventListener("change", function () {
            const selectedSubject = subjectDropdown.value.toLowerCase();
            document.querySelectorAll("#gradesBody tr").forEach(row => {
                const rowSubject = row.getAttribute("data-subject")?.toLowerCase();
                row.style.display = (selectedSubject === "" || rowSubject === selectedSubject) ? "" : "none";
            });
        });

        // Sorting function
        sortButton.addEventListener("click", function () {
            let rows = Array.from(gradesBody.querySelectorAll("tr"));
            rows.sort((a, b) => {
                let scoreA = parseFloat(a.querySelector(".score").textContent) || 0;
                let scoreB = parseFloat(b.querySelector(".score").textContent) || 0;
                return ascending ? scoreA - scoreB : scoreB - scoreA;
            });

            rows.forEach(row => gradesBody.appendChild(row));  // Reorder table
            ascending = !ascending;  // Toggle sort order

            // Update button icon
            sortButton.innerHTML = `Sort by Score ${ascending ? "🔼" : "🔽"}`;
        });
    });
</script>