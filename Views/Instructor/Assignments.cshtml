


@model List<EduSubmit.Models.Assignment>

@{
    Layout = "~/Views/Shared/_InstructorLayout.cshtml";
    ViewData["Title"] = "Assignments";
    ViewData["ActivePage"] = "Assignments";
}

<div class="container mt-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mb-4 ps-3 pe-3 gap-3">
        <h3 class="text-center text-md-start" style="font-size:2rem">Assignments</h3>
        <div class="d-flex flex-column flex-sm-row gap-2">
            <a asp-controller="Instructor" asp-action="CreateAssignment" asp-route-isCoding="false" class="btn btn-primary w-100 w-sm-auto full-width-sm" style="line-height: 1.5; height: 50px;">+ Create Assignment</a>
            <a asp-controller="Instructor" asp-action="CreateAssignment" asp-route-isCoding="true" class="btn btn-primary w-100 w-sm-auto full-width-sm" style="line-height: 1.5; height: 50px;">+ Create Coding Assignment</a>
        </div>
    </div>

    <form id="filterForm" class="mb-4">
        <div class="row gy-3 gx-3">
            <div class="col-12 col-md-3">
                <label>Class</label>
                <select id="classFilter" class="form-control">
                    <option value="">All Classes</option>
                    @foreach (var cls in ViewBag.Classes)
                    {
                        <option value="@cls.Value">@cls.Text</option>
                    }
                </select>
            </div>

            <div class="col-12 col-md-3">
                <label>Subject Name</label>
                <select id="subjectFilter" class="form-control">
                    <option value="">All Subjects</option>
                    @foreach (var subject in Model.Select(a => a.SubjectName).Distinct())
                    {
                        <option value="@subject">@subject</option>
                    }
                </select>
            </div>

            <div class="col-12 col-md-3">
                <label>Due Month</label>
                <select id="dueMonthFilter" class="form-control">
                    <option value="">All Months</option>
                    @foreach (var month in Model.Select(a => a.DueDate.ToString("yyyy-MM")).Distinct().OrderBy(m => m))
                    {
                        <option value="@month">@DateTime.ParseExact(month, "yyyy-MM", null).ToString("MMMM yyyy")</option>
                    }
                </select>
            </div>

            <div class="col-12 col-md-3">
                <label>Sort by Points</label>
                <select id="pointsSort" class="form-control">
                    <option value="">No Sorting</option>
                    <option value="asc">Ascending</option>
                    <option value="desc">Descending</option>
                </select>
            </div>
        </div>
    </form>

    <div class="row" id="assignmentsContainer">
        @foreach (var assignment in Model)
        {
            <div class="col-12 col-sm-6 col-md-4 assignment-card"
                 data-class="@assignment.ClassId"
                 data-subject="@assignment.SubjectName"
                 data-duemonth="@assignment.DueDate.ToString("yyyy-MM")">
                <a asp-controller="Instructor" asp-action="AssignmentDetails" asp-route-id="@assignment.AssignmentId" class="text-decoration-none">
                    <div class="card shadow-sm p-3 mb-4 bg-white rounded">
                        <div class="card-body">
                            <h5 class="card-title">@assignment.Title</h5>
                            <p>Subject: @assignment.SubjectName</p>
                            <p>Class: @assignment.Class?.ClassName</p>
                            <p>Points: @assignment.Points</p>
                            <p>Due: @assignment.DueDate.ToString("yyyy-MM-dd")</p>
                            <p>Submissions: @(assignment.Submissions?.Count() ?? 0)</p>
                            <div class="d-flex flex-column flex-md-row justify-content-between mt-3 gap-2">
                                <a asp-controller="Instructor" asp-action="EditAssignment" asp-route-id="@assignment.AssignmentId" class="btn btn-success shadow-sm full-width-sm">Edit</a>
                                <a asp-controller="Instructor" asp-action="DeleteAssignment" asp-route-id="@assignment.AssignmentId" class="btn btn-danger shadow-sm full-width-sm">Delete</a>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const classFilter = document.getElementById("classFilter");
        const subjectFilter = document.getElementById("subjectFilter");
        const dueMonthFilter = document.getElementById("dueMonthFilter");
        const pointsSort = document.getElementById("pointsSort");
        const assignmentsContainer = document.getElementById("assignmentsContainer");

        function filterAssignments() {
            const selectedClass = classFilter.value;
            const selectedSubject = subjectFilter.value;
            const selectedDueMonth = dueMonthFilter.value;
            const selectedSort = pointsSort.value;

            let assignments = Array.from(document.querySelectorAll(".assignment-card"));

            assignments.forEach(card => {
                const cardClass = card.getAttribute("data-class");
                const cardSubject = card.getAttribute("data-subject");
                const cardDueMonth = card.getAttribute("data-duemonth");

                let isVisible = true;
                if (selectedClass && selectedClass !== cardClass) isVisible = false;
                if (selectedSubject && selectedSubject !== cardSubject) isVisible = false;
                if (selectedDueMonth && selectedDueMonth !== cardDueMonth) isVisible = false;

                card.style.display = isVisible ? "block" : "none";
            });

            if (selectedSort) {
                assignments.sort((a, b) => {
                    let pointsA = parseInt(a.querySelector("p:nth-of-type(3)").textContent.replace("Points:", "").trim()) || 0;
                    let pointsB = parseInt(b.querySelector("p:nth-of-type(3)").textContent.replace("Points:", "").trim()) || 0;
                    return selectedSort === "asc" ? pointsA - pointsB : pointsB - pointsA;
                });

                assignmentsContainer.innerHTML = "";
                assignments.forEach(card => assignmentsContainer.appendChild(card));
            }

            localStorage.setItem("classFilter", selectedClass);
            localStorage.setItem("subjectFilter", selectedSubject);
            localStorage.setItem("dueMonthFilter", selectedDueMonth);
            localStorage.setItem("pointsSort", selectedSort);
        }

        classFilter.value = localStorage.getItem("classFilter") || "";
        subjectFilter.value = localStorage.getItem("subjectFilter") || "";
        dueMonthFilter.value = localStorage.getItem("dueMonthFilter") || "";
        pointsSort.value = localStorage.getItem("pointsSort") || "";

        filterAssignments();

        classFilter.addEventListener("change", filterAssignments);
        subjectFilter.addEventListener("change", filterAssignments);
        dueMonthFilter.addEventListener("change", filterAssignments);
        pointsSort.addEventListener("change", filterAssignments);
    });
</script>

<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

<style>
    .container {
        max-width: 95%;
        margin: auto;
        padding: 0px;
    }

    h3 {
       
        font-weight: 600;
        color: #212529;
        border-bottom: 3px solid #6e8efb;
        display: inline-block;
        padding-bottom: 5px;
    }

    form {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

        form label {
            font-weight: 600;
            margin-bottom: 5px;
        }

    .form-control {
        border-radius: 6px;
        border: 1px solid #ced4da;
        padding: 10px;
        transition: border 0.3s ease-in-out;
        font-size: 14px;
    }

        .form-control:focus {
            border-color: #4CAF50;
            box-shadow: 0px 0px 5px rgba(76, 175, 80, 0.5);
        }

    .card {
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.12);
        transition: all 0.3s ease-in-out;
        border: 1px thin gray;
        background: #ffffff;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.2);
        }

    .card-body {
        padding: 20px;
    }

    .card-title {
        font-weight: 700;
        color: #333;
    }

    .btn-success, .btn-danger {
        border-radius: 5px;
        padding: 8px 15px;
        font-weight: 600;
        transition: all 0.3s ease-in-out;
    }

    .btn-success {
        background-color: #4CAF50;
        border: none;
    }

        .btn-success:hover {
            background: #388E3C;
        }

    .btn-danger {
        background-color: #E53935;
        border: none;
    }

        .btn-danger:hover {
            background: #C62828;
        }

    a.text-decoration-none {
        text-decoration: none;
        color: inherit;
    }

        a.text-decoration-none:hover .card {
            box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.2);
            transform: scale(1.02);
        }

    @@media (max-width: 576px) {
    
            .btn.full-width-sm

    {
        width: 100%;
        margin-bottom: 10px;
    }

    }


    h3 {
        font-size: 20px;
        text-align: center;
    }

    .d-flex.justify-content-between.mt-3,
    .d-flex.gap-3 {
        flex-direction: column;
        gap: 10px;
    }

    form .row > div {
        margin-bottom: 15px;
    }

    }
</style>


<!-- FontAwesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

